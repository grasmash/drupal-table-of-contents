<?php

/**
 * @file
 * Module implementation file.
 */

/**
 * Implements hook_field_formatter_info().
 */
function table_of_contents_field_formatter_info() {
  return array(
    'table_of_contents_text' => array(
      'label' => t('Text with anchors & table of contents'),
      'field types' => array('text', 'text_long', 'text_with_summary'),
      'settings' => array('toc_selector' => 'h2'),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function table_of_contents_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  if ($display['type'] == 'table_of_contents_text') {
    $element['toc_selector'] = array(
      '#title' => t('Enter a CSS selector'),
      '#description' => t('The matched elements will be used as the header items. Example: <em>h3</em>.'),
      '#type' => 'textfield',
      '#default_value' => $settings['toc_selector'],
    );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function table_of_contents_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = '';

  if ($display['type'] == 'table_of_contents_text') {
    $summary .= ' ' . t('Selector: %selector', array(
        '%selector' => $settings['toc_selector'],
      ));
  }

  return $summary;
}


/**
 * Implements hook_field_formatter_view().
 */
function table_of_contents_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  foreach ($items as $delta => $item) {
    $output = _text_sanitize($instance, $langcode, $item, 'value');
    $html = new simple_html_dom();
    $html->load($output);
    $selector = $display['settings']['toc_selector'];
    foreach ($html->find($selector) as $tag) {
      $anchor = $tag->find('a.toc-anchor', 0);
      if (empty($anchor)) {
        $id = _table_of_contents_get_id($tag, 'view');
        $anchor = '<a id="' . $id . '" class="toc-anchor" title="Permalink to this headline" href="#' . $id . '"></a>';
        $tag->innertext = $anchor . $tag->innertext;
      }
    }
    $element[$delta] = array('#markup' => (string) $html);
  }

  return $element;
}

/**
 * Implements hook_block_info().
 */
function table_of_contents_block_info() {
  // Find all field instances that have the TOC block enabled.
  $blocks = array();
  $instances = field_info_instances();
  foreach ($instances as $entity_type => $bundles) {
    $entity_info = entity_get_info($entity_type);
    foreach ($bundles as $bundle => $field_instances) {
      foreach ($field_instances as $field_name => $field_instance) {
        foreach ($field_instance['display'] as $view_mode => $settings) {
          if (!empty($settings['settings']['toc_selector'])) {
            $delta = drupal_hash_base64('toc:' . $entity_type . ':' . $bundle . ':' . $field_name . ':' . $view_mode);
            $delta = 'toc_' . substr($delta, 0, 28);
            $blocks[$delta] = array(
              'info' => t('TOC for: @type > @bundle > Field: @name > View mode: @mode', array(
                '@type' => $entity_info['label'],
                '@bundle' => $entity_info['bundles'][$bundle]['label'],
                '@name' => $field_instance['label'],
                '@mode' => $view_mode == 'default' ? t('Default') : $entity_info['view modes'][$view_mode]['label'],
              )),
              'properties' => array(
                'entity_type' => $entity_type,
                'bundle' => $bundle,
                'field_name' => $field_name,
                'mode' => $view_mode,
              ),
              'cache' => DRUPAL_CACHE_GLOBAL,
            );
            $definitions = variable_get('table_of_contents_definitions', array());
            $definitions[$delta] =  array(
              'entity_type' => $entity_type,
              'bundle' => $bundle,
              'field_name' => $field_name,
              'mode' => $view_mode,
              'selector' => $settings['settings']['toc_selector'],
            );
            variable_set('table_of_contents_definitions', $definitions);
          }
        }
      }
    }
  }

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function table_of_contents_block_view($delta = '') {
  $block = array();
  $definitions = variable_get('table_of_contents_definitions', array());
  $definition = !empty($definitions[$delta]) ? $definitions[$delta] : NULL;
  if ($definition) {
    // Since blocks have no context, we need to find the ID for the entity in the URL.
    $entity_type = $definition['entity_type'];
    $bundle = $definition['bundle'];
    $field_name = $definition['field_name'];
    $view_mode = $definition['mode'];
    $selector = $definition['selector'];
    foreach (arg() as $argument) {
      if (is_numeric($argument) && $entity_array = entity_load($entity_type, array($argument))) {
        $entity_array = array_values($entity_array);
        $entity = reset($entity_array);
      }
    }
    if (!empty($entity)) {
      list($entity_id,, $entity_bundle) = entity_extract_ids($entity_type, $entity);
      if ($entity_bundle == $bundle) {
        $field_data = $entity->{$field_name};
        $ids = _table_of_contents_get_elements($field_data, $entity_type, $entity_id, $selector);
        if (!empty($ids)) {
          $items = array();
          foreach ($ids as $id => $data) {
            $items[] = array(
              'data' => l($data['text'], current_path(), array('fragment' => $id, 'attributes' => array(
                'class' => $data['class'],
              ))),
              'class' => array('anchor-list__item', $data['xmltag'] . '-tag'),
            );
          }

          try {
            $wrapper = entity_metadata_wrapper($entity_type, $entity);

            $can_access_field = $wrapper->{$field_name}->access('view');
            $can_access_entity = $wrapper->access('view');

            $has_access = ($can_access_field && $can_access_entity);
          }
          catch (\EntityMetadataWrapperException $e) {
            $has_access = FALSE;
          }

          $block = array(
            'subject' => t('Table of contents'),
            'content' => array(
              '#theme' => 'table_of_contents_item_list',
              '#items' => $items,
              '#attributes' => array(
                'class' => array('anchor-list'),
              ),
              '#delta' => $delta,
              '#access' => $has_access,
            ),
          );
        }
      }
    }
  }
  return $block;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function table_of_contents_form_field_ui_display_overview_form_alter(&$form, &$form_state, $form_id) {
  $form['#submit'][] = 'table_of_contents_clear_block_cache';
}

/**
 * Helper function to clear block cache.
 */
function table_of_contents_clear_block_cache($form, &$form_state) {
  block_flush_caches();
  drupal_set_message(t('Block caches cleared for Table of Contents.'));
}

/**
 * Get an array of html ids to link to and text for the links.
 *
 * @param array $field_data
 *   Structured array containing the field data.
 * @param string $entity_type
 *   Type of the entity being used.
 * @param string $entity_id
 *   ID of the entity being used.
 * @param string $selector
 *   Selector for the header elements.
 * @return array
 *   Contains the html id in the keys and the text for the link in the value.
 */
function _table_of_contents_get_elements($field_data, $entity_type, $entity_id, $selector) {
  $ids = array();
  foreach ($field_data as $language => $field_deltas) {
    foreach ($field_deltas as $value) {
      if (isset($value['safe_value']) && $value['safe_value'] instanceof simple_html_dom) {
        $html_obj = $value['safe_value'];
      }
      else {
        // Create a DOM object
        $html_obj = new simple_html_dom();
        // Parse the raw text using the correct input format so our
        // attributes get added properly.
        $text = check_markup($value['value'], $value['format']);
        // Load HTML from a string
        $html_obj->load($text);
      }
      foreach ($html_obj->find($selector) as $header_obj) {
        // If an id wasn't manually hardcoded, add one.
        if (empty($header_obj->id)) {
          $id = _table_of_contents_get_id($header_obj, 'toc');
          $ids[$id] = array(
            'class' => array('toc-link', 'toc-link-invalid-id'),
          );
        }
        else {
          $id = $header_obj->id;
          $ids[$id] = array(
            'class' => array('toc-link'),
          );
        }
        $ids[$id]['id'] = $id;
        $ids[$id]['text'] = $header_obj->plaintext;
        $ids[$id]['xmltag'] = $header_obj->tag;
      }
    }
  }
  return $ids;
}

/**
 * Helper function to get a unique HTML id for a header.
 *
 * @param simple_html_dom_node $header_obj
 *   simple_html_dom object representing the HTML node selected as title for the TOC.
 * @return string
 *   The recovered or generated id.
 */
function _table_of_contents_get_id(simple_html_dom_node $header_obj, $context) {
  $generated_ids = &drupal_static(__FUNCTION__);
  if (!isset($generated_ids[$context])) {
    $generated_ids[$context] = [];
  }

  $id = _table_of_contents_generate_id($header_obj);
  // Ensure header is unique within context. E.g, unique within rendered html
  // or unique with TOC list.
  if (array_search($id, $generated_ids[$context])) {
    $id_len = strlen($id);
    $num = 0;
    while (array_search($id, $generated_ids[$context])) {
      $id = substr($id, 0, $id_len) . '-' . $num;
      $num++;
    }
  }

  $generated_ids[$context][] = $id;

  return $id;
}

/**
 * Helper function to generate an HTML id for header.
 *
 * @param \simple_html_dom_node $header_obj
 *
 * @return string
 */
function _table_of_contents_generate_id(simple_html_dom_node $header_obj) {
  $text = $header_obj->plaintext;
  $id = drupal_clean_css_identifier($text);
  $id = strtolower($id);
  // Set maximum 100 character limit.
  $id = substr($id, 0, 100);

  return $id;
}

/**
 * Implements hook_theme().
 */
function table_of_contents_theme($existing, $type, $theme, $path) {
  return array(
    'table_of_contents_item_list' => array(
      'variables' => array(
        'title' => NULL,
        'items' => array(),
        'type' => 'ul',
        'attributes' => array(),
        'delta' => NULL,
      ),
    ),
  );
}

/**
 * Default theme implementation for theme_table_of_contents_item_list().
 */
function theme_table_of_contents_item_list(&$variables) {
  $delta = preg_replace('/:/', '_', $variables['delta']);
  return theme('item_list__' . $delta, $variables);
}

/**
 * Implements hook_requirements().
 */
function table_of_contents_requirements($phase) {
  $requirements = array();
  // Ensure translations don't break during installation.
  $t = get_t();
  // Report Drupal version
  if ($phase == 'runtime' && !_simplhtmldom_get_library_path()) {
    $requirements['simplehtmldom'] = array(
      'title' => $t('Simple HTML DOM'),
      'value' => $t('Not found'),
      'severity' => REQUIREMENT_ERROR,
      'description' => $t(),
    );
  }

}
